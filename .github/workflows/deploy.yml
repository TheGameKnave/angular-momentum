name: Deploy & Release (Web, Desktop, Mobile)

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and SonarQube Analysis"]
    types: [completed]
    branches: [main]

jobs:
  deploy-web:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "📦 Web App Version: $VERSION"

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "🚀 Deploying v$VERSION to Heroku..."
          git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/angular-momentum.git
          git push heroku main:main
          echo "✅ Deployment complete"

  build-desktop:
      strategy:
        fail-fast: false
        matrix:
          platform: [macos-latest, ubuntu-latest, windows-latest]
      runs-on: ${{ matrix.platform }}

      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 22.14.0

        - name: Install Rust
          uses: dtolnay/rust-toolchain@stable

        - name: Install Linux dependencies
          if: matrix.platform == 'ubuntu-latest'
          run: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev

        - name: Get version
          id: version
          shell: bash
          run: |
            VERSION=$(node -p "require('./package.json').version")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "📦 Desktop App Version: $VERSION"

        - name: Install dependencies
          run: |
            cd client
            npm ci

        - name: Build desktop app with Tauri Action
          uses: tauri-apps/tauri-action@v0
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
            TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
            # macOS signing
            APPLE_CERTIFICATE: ${{ secrets.MAC_CERT }}
            APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
            APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
            APPLE_ID: ${{ secrets.APPLE_ID }}
            APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
            APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          with:
            projectPath: client
            tauriScript: npx tauri

        - name: Upload build artifacts
          uses: actions/upload-artifact@v4
          with:
            name: desktop-${{ matrix.platform }}
            path: client/src-tauri/target/release/bundle/

  build-mobile:
    if: false
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "📦 Mobile App Version: $VERSION"

      - name: Build iOS and Android Apps (Dummy)
        run: |
          echo ""
          echo "📱 [DUMMY] Building mobile apps..."
          echo "   Version: $VERSION"
          sleep 2
          echo "✅ [DUMMY] iOS build complete"
          echo "✅ [DUMMY] Android build complete"

      - name: Submit to App Stores (Dummy)
        run: |
          echo ""
          echo "🍎 [DUMMY] Submitting to Apple App Store..."
          sleep 1
          echo "✅ [DUMMY] Would be submitted to App Store"
          echo ""
          echo "🤖 [DUMMY] Submitting to Google Play Store..."
          sleep 1
          echo "✅ [DUMMY] Would be submitted to Play Store"

  create-release:
    if: false
    runs-on: ubuntu-latest
    needs: [build-desktop, build-mobile, deploy-web]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "📦 Release Version: $VERSION"

      - name: Create GitHub Release (Dummy)
        run: |
          echo ""
          echo "📤 [DUMMY] Creating GitHub Release v$VERSION..."
          echo "   ✓ macOS .dmg"
          echo "   ✓ macOS .tar.gz"
          echo "   ✓ Windows .msi"
          echo "   ✓ Linux .AppImage"
          echo "   ✓ latest.json"
          echo "✅ [DUMMY] GitHub Release would be published"
          echo "   🔗 https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [deploy-web, build-desktop, build-mobile, create-release]
    if: false
    # if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo ""
          echo "════════════════════════════════════════════════════════"
          echo "✅ DUMMY DEPLOYMENT COMPLETE: v$VERSION"
          echo "════════════════════════════════════════════════════════"
          echo ""
          echo "🌐 Web Application: ${{ needs.deploy-web.result }}"
          echo "🖥️  Desktop Applications: ${{ needs.build-desktop.result }}"
          echo "📱 Mobile Applications: ${{ needs.build-mobile.result }}"
          echo "📦 GitHub Release: ${{ needs.create-release.result }}"
          echo ""
          echo "ℹ️  This was a dummy deployment - no actual changes made"
